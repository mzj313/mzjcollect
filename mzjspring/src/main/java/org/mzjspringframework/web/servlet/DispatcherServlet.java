package org.mzjspringframework.web.servlet;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.net.URL;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Map.Entry;import java.util.Properties;import java.util.function.Function;import javax.servlet.ServletConfig;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.mzjspringframework.beans.annotation.Autowired;import org.mzjspringframework.beans.annotation.Controller;import org.mzjspringframework.beans.annotation.RequestMapping;import org.mzjspringframework.beans.annotation.Service;import org.slf4j.Logger;import org.slf4j.LoggerFactory;@SuppressWarnings("serial")public class DispatcherServlet extends HttpServlet {	private static final Logger logger = LoggerFactory.getLogger(DispatcherServlet.class);	/**	 * 属性配置文件	 */	private Properties contextConfig = new Properties();	/**	 * 加载的类名集合	 */	private List<String> classNames = new ArrayList<>();	/**	 * IOC容器 [name, Bean]	 */	Map<String, Object> contextBeans = new HashMap<String, Object>();	/**	 * 请求处理器 [url, Method]	 */	Map<String, Method> handlerMappings = new HashMap<String, Method>();	@Override	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {		this.service(req, resp);	}	@Override	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {		this.service(req, resp);	}	@Override	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {		try {			this.doDispatch(req, resp);		} catch (Exception e) {			logger.error("dispatch 处理异常", e);			resp.getWriter().write("500 Exception Detail:\n" + Arrays.toString(e.getStackTrace()));		}	}	/**	 * 运行阶段，进行拦截，匹配	 * 	 * @param req	 * @param resp	 * @throws InvocationTargetException	 * @throws IllegalAccessException	 */	private void doDispatch(HttpServletRequest req, HttpServletResponse resp)			throws InvocationTargetException, IllegalAccessException {		String url = req.getRequestURI();		String contextPath = req.getContextPath();		url = url.replaceAll(contextPath, "").replaceAll("/+", "/");		logger.info("开始处理请求 url：{}", url);		if (!this.handlerMappings.containsKey(url)) {			try {				resp.getWriter().write("404 NOT FOUND!!");				return;			} catch (IOException e) {				e.printStackTrace();			}		}		Method method = this.handlerMappings.get(url);		// 请求参数类型列表		Class<?>[] parameterTypes = method.getParameterTypes();		Map<String, String[]> parameterMap = req.getParameterMap();		// 保存参数值		Object[] paramValues = new Object[parameterTypes.length];		for (int i = 0; i < parameterTypes.length; i++) {			// 根据参数名称，做某些处理			String requestParam = parameterTypes[i].getSimpleName();			if (requestParam.equals("HttpServletRequest")) {				paramValues[i] = req;				continue;			}			if (requestParam.equals("HttpServletResponse")) {				paramValues[i] = resp;				continue;			}			if (requestParam.equals("String")) {				for (Entry<String, String[]> param : parameterMap.entrySet()) {					String value = Arrays.toString(param.getValue()).replaceAll("\\[|\\]", "").replaceAll(",\\s", ",");					paramValues[i] = value;				}			}		}		// 利用反射机制来调用		try {			String beanName = toLowerFirstCase(method.getDeclaringClass().getSimpleName());			logger.info("调用方法 {}.{}", method.getDeclaringClass().getName(), method.getName());			method.invoke(contextBeans.get(beanName), paramValues);			logger.info("完成处理请求 url:{}", url);		} catch (Exception e) {			e.printStackTrace();		}	}	/**	 * initServletBean -> initWebApplicationContext -> onRefresh ->	 * initStrategies	 */	@Override	public void init(ServletConfig servletConfig) throws ServletException {		logger.info("开始初始化 ->");		// 1、加载配置文件		doLoadConfig(servletConfig.getInitParameter("contextConfigLocation"));		// 2、扫描相关的类		doScanner(contextConfig.getProperty("scanPackage"), 0);		// 3、初始化 IOC 容器，将所有相关的类实例保存到 IOC 容器中		doInstance();		// 4、依赖注入		doAutowired();		// 5、初始化 HandlerMapping		initHandlerMapping();		logger.info("初始化完成-|");	}	/**	 * 加载配置文件	 * 	 * @param contextConfigLocation	 *            对应web.xml>servlet>init-param名为contextConfigLocation的属性的值	 */	private void doLoadConfig(String contextConfigLocation) {		logger.info("开始加载配置文件...");		InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream(contextConfigLocation);		try {			contextConfig.load(inputStream);			logger.info("结束加载配置文件. contextConfig：{}", contextConfig);		} catch (IOException e) {			throw new RuntimeException("加载配置文件出错 " + contextConfigLocation, e);		} finally {			if (null != inputStream) {				try {					inputStream.close();				} catch (IOException e) {					e.printStackTrace();				}			}		}	}	/**	 * 扫描相关的类	 *	 * @param scanPackage	 *            properties --> scan-package	 */	private void doScanner(String scanPackage, int level) {		if (level == 0) {			logger.info("开始扫描包加载类... {}", scanPackage);		}		URL resourcePath = this.getClass().getClassLoader().getResource(scanPackage.replaceAll("\\.", "/"));		if (resourcePath == null) {			return;		}		File classPath = new File(resourcePath.getFile());		for (File file : classPath.listFiles()) {			if (file.isDirectory()) {				doScanner(scanPackage + "." + file.getName(), level + 1);			} else {				if (!file.getName().endsWith(".class")) {					continue;				}				String className = (scanPackage + "." + file.getName()).replace(".class", "");				classNames.add(className);				logger.info("加载 {}", className);			}		}		if (level == 0) {			logger.info("结束扫描包加载类. {}", scanPackage);		}	}	/**	 * 3、初始化 IOC 容器，将所有相关的类实例保存到 IOC 容器中	 */	private void doInstance() {		logger.info("开始初始化容器...");		if (classNames.isEmpty()) {			return;		}		try {			for (String className : classNames) {				Class<?> clazz = Class.forName(className);				if (clazz.isAnnotationPresent(Controller.class)) {					Function<Class<?>, String> func = clasz -> ((Controller) clasz.getAnnotation(Controller.class))							.value();					String beanName = getBeanName(clazz, func);					Object instance = clazz.newInstance();					contextBeans.put(beanName, instance);					logger.info(" {" + beanName + "} has been saved in iocMap.");				} else if (clazz.isAnnotationPresent(Service.class)) {					Function<Class<?>, String> func = clasz -> ((Service) clasz.getAnnotation(Service.class)).value();					String beanName = getBeanName(clazz, func);					Object instance = clazz.newInstance();					contextBeans.put(beanName, instance);					logger.info("{" + beanName + "} has been saved in iocMap.");					// 找类的接口					for (Class<?> i : clazz.getInterfaces()) {						if (contextBeans.containsKey(i.getName())) {							throw new Exception("The Bean Name Is Exist.");						}						contextBeans.put(i.getName(), instance);						logger.info("{" + i.getName() + "} has been saved in iocMap.");					}				}			}		} catch (Exception e) {			e.printStackTrace();		}		logger.info("结束容器初始化. contextBeans: {}", contextBeans);	}	private String getBeanName(Class<?> clazz, Function<Class<?>, String> func) {		String beanName = func.apply(clazz);		if ("".equals(beanName)) {			String simpleName = clazz.getSimpleName();			beanName = toLowerFirstCase(simpleName);		}		return beanName;	}	private void doAutowired() {		logger.info("开始注入依赖...");		if (contextBeans.isEmpty()) {			return;		}		for (Map.Entry<String, Object> entry : contextBeans.entrySet()) {			Object object = entry.getValue();			Field[] fields = object.getClass().getDeclaredFields();			for (Field field : fields) {				if (!field.isAnnotationPresent(Autowired.class)) {					continue;				}				Autowired autowired = field.getAnnotation(Autowired.class);				String beanName = autowired.value().trim();				if ("".equals(beanName)) {					beanName = field.getType().getName();				}				field.setAccessible(true);				try {					field.set(object, contextBeans.get(beanName));					logger.info("给 {} 的属性 {} 设置对象 {}", object.getClass().getName(), field.getName(),							contextBeans.get(beanName));				} catch (IllegalAccessException e) {					e.printStackTrace();				}			}		}		logger.info("结束注入依赖.");	}	private void initHandlerMapping() {		logger.info("开始初始化HandlerMapping->");		if (contextBeans.isEmpty()) {			return;		}		for (Map.Entry<String, Object> entry : contextBeans.entrySet()) {			Class<?> clazz = entry.getValue().getClass();			if (!clazz.isAnnotationPresent(Controller.class)) {				continue;			}			String baseUrl = "";			if (clazz.isAnnotationPresent(RequestMapping.class)) {				RequestMapping xRequestMapping = clazz.getAnnotation(RequestMapping.class);				baseUrl = xRequestMapping.value();			}			for (Method method : clazz.getMethods()) {				if (!method.isAnnotationPresent(RequestMapping.class)) {					continue;				}				RequestMapping xRequestMapping = method.getAnnotation(RequestMapping.class);				String url = ("/" + baseUrl + "/" + xRequestMapping.value()).replaceAll("/+", "/");				handlerMappings.put(url, method);				logger.info(" handlerMapping put {" + url + "} - {" + method + "}.");			}		}		logger.info("结束初始化HandlerMapping-|");	}	/**	 * 获取类的首字母小写的名称	 *	 * @param className	 *            ClassName	 * @return java.lang.String	 */	private String toLowerFirstCase(String className) {		char[] charArray = className.toCharArray();		charArray[0] += 32;		return String.valueOf(charArray);	}}